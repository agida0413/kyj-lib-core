server:
  port: 8089
#-----core------------------
spring:
  mail:
    host: smtp.gmail.com
    port: 587
    username: 'gimyongjun414@gmail.com'
    password: 'uaae kceo ihwr croz'
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
management:
  endpoints:
    web:
      exposure:
        include: health,info  # health 및 info endpoint를 외부에 노출
  endpoint:
    health:
      show-details: always   # 헬스체크 상세 정보를 항상 표시
      probes:
        enabled: true        # liveness/readiness 프로브 활성화
  health:
    readinessstate:
      enabled: true          # readiness 상태를 별도로 관리
#-------redis---------------
  redis:
    host: 100.114.34.71
    port: 6380
#------rdb---------------
  datasource:
    url: jdbc:h2:tcp://localhost/~/test
    username: sa
    password:
    driver-class-name: org.h2.Driver
#------jpa------------
  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        #        show_sql: true
        format_sql: true
        use_sql_comments: true
logging:
  level:
    org.hibernate.SQL: debug
    org.hibernate.type: trace
#------kafka----------
  kafka:
    bootstrap-servers: 100.114.34.71:9095,100.114.34.71:9096,100.114.34.71:9097  # 여러 브로커 콤마 구분
    consumer:
      #group-id: my-group
      auto-offset-reset: latest         # 처음 시작 시 가장 오래된 오프셋부터 읽음
      enable-auto-commit: false           # 자동 커밋 비활성화 (권장)
      #      auto-commit-interval: 100           # 자동 커밋 활성 시 커밋 주기 (ms)
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    #      max-poll-records: 10                # 한 번 poll 시 최대 레코드 수
    listener:
      ack-mode: manual                   # 수동 커밋 모드
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer


#------- file-----
s3:
  credentials:
    access-key: ${S3_ACCESS}
    secret-key: ${S3_SECRET}
    region: ap-northeast-2
    bucket: ${S3_BUCKET}




  jwt:
    secret: asdasdasdaxavxasdadadasdsasdasdasdadsadadsasdadadsadsasd

  security:
    oauth2:
      client:
        registration:
          naver:
            client-name: naver
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: http://localhost:8089/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope:
              - email
          google:
            client-name: google
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: http://localhost:8089/login/oauth2/code/google
            authorization-grant-type: authorization_code
            scope:
              - email
          kakao:
            client-name: kakao
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ""
            redirect-uri: http://localhost:8089/login/oauth2/code/kakao
            authorization-grant-type: authorization_code
            scope:
              - account_email

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
      login:
        success-url: http://localhost:3000/
        addition-info-url: http://localhost:3000/

#mybatis:
#  mapper-locations: classpath:mapper/**/*.xml
#  type-aliases-package: com.kyj.*
#  configuration:
#    map-underscore-to-camel-case: true







