pipeline {
    agent any

    tools {
        gradle 'gradle-8.3'
        jdk 'jdk-17'
    }

    parameters {
        choice(
            name: 'DEPLOY_TYPE',
            choices: ['CORE_ONLY', 'WITH_KAFKA', 'WITH_REDIS', 'WITH_FILE', 'WITH_JPA', 'ALL_MODULES'],
            description: '배포할 모듈 선택'
        )
        choice(
            name: 'BRANCH',
            choices: ['main'],
            description: '배포할 브랜치 선택'
        )
        booleanParam(
            name: 'RUN_TESTS',
            defaultValue: true,
            description: '테스트 실행 여부'
        )
        booleanParam(
            name: 'CLEAN_BUILD',
            defaultValue: true,
            description: 'Clean 빌드 실행 여부'
        )
    }

    environment {
        APP_GITHUB_URL = 'https://github.com/agida0413/kyj-fk-be-core.git'
        APP_VERSION = '0.0.1-SNAPSHOT'
        GRADLE_OPTS = '-Dorg.gradle.daemon=false'
    }

    stages {
        stage('환경 정보 출력') {
            steps {
                script {
                    echo "=== 배포 정보 ==="
                    echo "브랜치: ${params.BRANCH}"
                    echo "배포 타입: ${params.DEPLOY_TYPE}"
                    echo "테스트 실행: ${params.RUN_TESTS}"
                    echo "Clean 빌드: ${params.CLEAN_BUILD}"
                    echo "앱 버전: ${APP_VERSION}"
                }
            }
        }

        stage('소스코드 체크아웃') {
            steps {
                git branch: "${params.BRANCH}", url: "${APP_GITHUB_URL}"
            }
        }

        stage('Gradle 권한 설정') {
            steps {
                sh "chmod +x ./gradlew"
            }
        }

        stage('소스 빌드') {
            steps {
                script {
                    def buildCommand = "./gradlew"

                    if (params.CLEAN_BUILD) {
                        buildCommand += " clean"
                    }

                    buildCommand += " build"

                    if (!params.RUN_TESTS) {
                        buildCommand += " -x test"
                    }

                    echo "실행할 빌드 명령어: ${buildCommand}"
                    sh buildCommand
                }
            }
        }

        stage('모듈별 넥서스 배포') {
            steps {
                script {
                    def deployCommand = ""

                    switch(params.DEPLOY_TYPE) {
                        case 'CORE_ONLY':
                            deployCommand = "./gradlew publishCore"
                            echo "코어 모듈만 배포합니다."
                            break
                        case 'WITH_KAFKA':
                            deployCommand = "./gradlew publishWithKafka"
                            echo "코어 + 카프카 모듈을 배포합니다."
                            break
                        case 'WITH_REDIS':
                            deployCommand = "./gradlew publishWithRedis"
                            echo "코어 + 레디스 모듈을 배포합니다."
                            break
                        case 'WITH_FILE':
                            deployCommand = "./gradlew publishWithFile"
                            echo "코어 + 파일 모듈을 배포합니다."
                            break
                        case 'WITH_JPA':
                            deployCommand = "./gradlew publishWithJpa"
                            echo "코어 + JPA 모듈을 배포합니다."
                            break
                        case 'ALL_MODULES':
                            deployCommand = "./gradlew publishAll"
                            echo "모든 모듈을 배포합니다."
                            break
                        default:
                            error("알 수 없는 배포 타입: ${params.DEPLOY_TYPE}")
                    }

                    echo "실행할 배포 명령어: ${deployCommand}"
                    sh deployCommand
                }
            }
        }

        stage('배포 결과 확인') {
            steps {
                script {
                    echo "=== 배포 완료 ==="
                    echo "배포된 모듈: ${params.DEPLOY_TYPE}"
                    echo "브랜치: ${params.BRANCH}"
                    echo "버전: ${APP_VERSION}"

                    // 배포된 아티팩트 정보 출력
                    sh "./gradlew dependencies --configuration runtimeClasspath | head -20"
                }
            }
        }
    }

    post {
        always {
            script {
                echo "=== 파이프라인 실행 완료 ==="
                echo "실행 시간: ${currentBuild.durationString}"
                echo "빌드 결과: ${currentBuild.currentResult}"
            }

            // 빌드 아티팩트 보관 (선택적)
            archiveArtifacts artifacts: '**/build/libs/*.jar', fingerprint: true, allowEmptyArchive: true

            // 테스트 결과 퍼블리시 (테스트 실행한 경우)
            publishTestResults testResultsPattern: '**/build/test-results/test/*.xml', allowEmptyResults: true
        }

        success {
            echo "✅ 배포가 성공적으로 완료되었습니다!"
        }

        failure {
            echo "❌ 배포 중 오류가 발생했습니다. 로그를 확인해주세요."
        }

        unstable {
            echo "⚠️ 배포는 완료되었지만 일부 테스트가 실패했습니다."
        }
    }
}