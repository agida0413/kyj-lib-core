# KYJ Core Library 통합 설정
# 각 모듈별로 필요한 섹션만 활성화하여 사용하세요

spring:
  profiles:
    active: local

  # 애플리케이션 기본 설정
  application:
    name: kyj-core-app

  # ===== 이메일 설정 (kyj-lib-core) =====
  mail:
    host: smtp.gmail.com
    port: 587
    username: 'gimyongjun414@gmail.com'
    password: 'uaae kceo ihwr croz'
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  # ===== 데이터베이스 설정 (kyj-lib-core-rdb, kyj-lib-core-jpa) =====
  datasource:
    url: jdbc:h2:tcp://localhost/~/test
    username: sa
    password:
    driver-class-name: org.h2.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  # JPA 설정 (kyj-lib-core-jpa)
  jpa:
    hibernate:
      ddl-auto: create
    show-sql: false
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        dialect: org.hibernate.dialect.MySQLDialect

  # ===== Redis 설정 (kyj-lib-core-redis) =====
  data:
    redis:
      host: 100.114.34.71
      port: 6380
      # password는 프로파일별 설정
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms

  # ===== Kafka 설정 (kyj-lib-core-kafka) =====
  kafka:
    bootstrap-servers: 100.114.34.71:9095,100.114.34.71:9096,100.114.34.71:9097
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
      retries: 3
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP:kyj-core-group}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      auto-offset-reset: latest
      enable-auto-commit: false
    listener:
      ack-mode: manual

  # ===== OAuth2 설정 (kyj-lib-core-security-auth) =====
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID:your-google-client-id}
            client-secret: ${GOOGLE_CLIENT_SECRET:your-google-client-secret}
            scope: profile,email
            redirect-uri: ${BASE_URL:http://localhost:8080}/login/oauth2/code/google
          naver:
            client-id: ${NAVER_CLIENT_ID:your-naver-client-id}
            client-secret: ${NAVER_CLIENT_SECRET:your-naver-client-secret}
            scope: name,email
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: ${BASE_URL:http://localhost:8080}/login/oauth2/code/naver
          kakao:
            client-id: ${KAKAO_CLIENT_ID:your-kakao-client-id}
            client-secret: ${KAKAO_CLIENT_SECRET:your-kakao-client-secret}
            scope: profile_nickname,account_email
            client-name: Kakao
            authorization-grant-type: authorization_code
            redirect-uri: ${BASE_URL:http://localhost:8080}/login/oauth2/code/kakao
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

  # ===== JWT 클라이언트 설정 (kyj-lib-core-security-client) =====
  jwt:
    secret: ${JWT_SECRET:your-super-secret-jwt-key-at-least-32-characters-long}

# ===== 모니터링 설정 (kyj-lib-core 포함) =====
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  health:
    readinessstate:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true

# ===== AWS S3 설정 (kyj-lib-core-file) =====
s3:
  credentials:
    access-key: ${S3_ACCESS}
    secret-key: ${S3_SECRET}
    region: ap-northeast-2
    bucket: ${S3_BUCKET}






  # 시큐리티 모듈 설정
  security:
    # 인증 서버 설정 (kyj-lib-core-security-auth 사용시)
    auth:
      token:
        secret: ${JWT_SECRET:your-super-secret-jwt-key-at-least-32-characters-long}
        access-token-expiry: 3600000      # 1시간
        refresh-token-expiry: 86400000    # 24시간
      oauth2:
        success-redirect-url: ${FRONTEND_URL:http://localhost:3000}/auth/success
        failure-redirect-url: ${FRONTEND_URL:http://localhost:3000}/auth/failure
        logout-redirect-url: ${FRONTEND_URL:http://localhost:3000}
        supported-providers:
          - google
          - naver
          - kakao
      cookie:
        domain: ${COOKIE_DOMAIN:}
        path: /
        secure: ${COOKIE_SECURE:false}
        http-only: true
        same-site: Lax

    # 클라이언트 설정 (kyj-lib-core-security-client 사용시)
    client:
      jwt:
        secret: ${JWT_SECRET:your-super-secret-jwt-key-at-least-32-characters-long}
      auth:
        require-auth-by-default: true
        enable-blacklist-check: true
      api-gateway:
        enabled: ${API_GATEWAY_ENABLED:false}
        user-info-header: x-api-gateway-user-info
        verify-gateway-trust: true
        trusted-sources:
          - x-forwarded-for
          - x-real-ip
      enabled: false # 기본 시큐리티 필터

# ===== 로깅 설정 =====
logging:
  level:
    com.kyj.core: INFO
    com.kyj.core.security: DEBUG
    org.springframework.security: INFO
    org.springframework.security.oauth2: DEBUG
    org.springframework.kafka: INFO
    org.springframework.data.redis: INFO
    com.zaxxer.hikari: INFO
    org.hibernate.SQL: debug
    org.hibernate.type: trace

---
# ===== 로컬 개발 환경 =====
spring:
  config:
    activate:
      on-profile: local

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update

  data:
    redis:
      password:  # 로컬에서는 패스워드 없음

logging:
  level:
    com.kyj.core: DEBUG
    org.springframework.web: DEBUG
    org.springframework.security: DEBUG

---
# ===== 개발 환경 =====
spring:
  config:
    activate:
      on-profile: dev

  jpa:
    hibernate:
      ddl-auto: validate

kyj:
  security:
    auth:
      cookie:
        secure: false

---
# ===== 프로덕션 환경 =====
spring:
  config:
    activate:
      on-profile: prod

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false

kyj:
  security:
    auth:
      cookie:
        secure: true
        same-site: Strict

logging:
  level:
    com.kyj.core: INFO
    org.springframework.web: WARN
    org.springframework.security: WARN