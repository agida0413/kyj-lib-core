# KYJ Core Library 통합 설정 예시
# 필요한 모듈에 따라 해당 섹션만 선택적으로 사용하세요

spring:
  profiles:
    active: local

  # 애플리케이션 기본 설정
  application:
    name: kyj-core-app

  # 데이터베이스 설정 (JPA/RDB 모듈 사용시)
  datasource:
    url: jdbc:mysql://localhost:3306/${DB_NAME:kyj_db}
    username: ${DB_USERNAME:kyj_user}
    password: ${DB_PASSWORD:password}
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  # JPA 설정 (kyj-lib-core-jpa 사용시)
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        dialect: org.hibernate.dialect.MySQLDialect

  # Redis 설정 (kyj-lib-core-redis, security 모듈 사용시)
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:}
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms

  # Kafka 설정 (kyj-lib-core-kafka 사용시)
  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
      retries: 3
    consumer:
      group-id: ${KAFKA_CONSUMER_GROUP:kyj-core-group}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      auto-offset-reset: earliest
      enable-auto-commit: false

  # 이메일 설정 (kyj-lib-core 사용시)
  mail:
    host: ${MAIL_HOST:smtp.gmail.com}
    port: ${MAIL_PORT:587}
    username: ${MAIL_USERNAME:your-email@gmail.com}
    password: ${MAIL_PASSWORD:your-app-password}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  # OAuth2 설정 (kyj-lib-core-security-auth 사용시)
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID:your-google-client-id}
            client-secret: ${GOOGLE_CLIENT_SECRET:your-google-client-secret}
            scope: profile,email
            redirect-uri: ${BASE_URL:http://localhost:8080}/login/oauth2/code/google

          naver:
            client-id: ${NAVER_CLIENT_ID:your-naver-client-id}
            client-secret: ${NAVER_CLIENT_SECRET:your-naver-client-secret}
            scope: name,email
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: ${BASE_URL:http://localhost:8080}/login/oauth2/code/naver

          kakao:
            client-id: ${KAKAO_CLIENT_ID:your-kakao-client-id}
            client-secret: ${KAKAO_CLIENT_SECRET:your-kakao-client-secret}
            scope: profile_nickname,account_email
            client-name: Kakao
            authorization-grant-type: authorization_code
            redirect-uri: ${BASE_URL:http://localhost:8080}/login/oauth2/code/kakao

        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

# KYJ Core Library 설정
kyj:
  # 코어 모듈 설정
  core:
    # API 응답 설정
    api:
      default-page-size: 20
      max-page-size: 100

  # 파일 모듈 설정 (kyj-lib-core-file 사용시)
  file:
    aws:
      s3:
        bucket-name: ${AWS_S3_BUCKET:your-bucket-name}
        region: ${AWS_REGION:ap-northeast-2}
        access-key: ${AWS_ACCESS_KEY:your-access-key}
        secret-key: ${AWS_SECRET_KEY:your-secret-key}
        upload-path: uploads/
        max-file-size: 10MB

  # RDB 모듈 설정 (kyj-lib-core-rdb 사용시)
  rdb:
    # 분산 락 설정
    distributed-lock:
      lease-time: 10000  # 10초
      wait-time: 3000    # 3초
      lock-prefix: "kyj:lock:"

    # 다중 데이터소스 설정
    multiple-datasources:
      enabled: false
      primary: main
      datasources:
        main:
          url: jdbc:mysql://localhost:3306/${DB_NAME:kyj_db}
          username: ${DB_USERNAME:kyj_user}
          password: ${DB_PASSWORD:password}

  # Kafka 모듈 설정 (kyj-lib-core-kafka 사용시)
  kafka:
    # 토픽 설정
    topics:
      user-events: user-events
      notification: notification
      audit-log: audit-log

    # 프로듀서 설정
    producer:
      retry-count: 3
      batch-size: 16384

    # 컨슈머 설정
    consumer:
      max-poll-records: 500
      fetch-max-wait: 500

  # 보안 모듈 설정
  security:
    # 인증 서버 설정 (kyj-lib-core-security-auth 사용시)
    auth:
      # 토큰 관련 설정
      token:
        # JWT 시크릿 키 (필수 - 환경변수로 설정 권장)
        secret: ${JWT_SECRET:your-super-secret-jwt-key-at-least-32-characters-long}
        # 액세스 토큰 만료 시간 (밀리초) - 기본 1시간
        access-token-expiry: 3600000
        # 리프레시 토큰 만료 시간 (밀리초) - 기본 24시간
        refresh-token-expiry: 86400000

      # OAuth2 리다이렉트 URL 설정
      oauth2:
        # 로그인 성공 후 리다이렉트할 프론트엔드 URL
        success-redirect-url: ${FRONTEND_URL:http://localhost:3000}/auth/success
        # 로그인 실패 후 리다이렉트할 프론트엔드 URL
        failure-redirect-url: ${FRONTEND_URL:http://localhost:3000}/auth/failure
        # 로그아웃 후 리다이렉트할 프론트엔드 URL
        logout-redirect-url: ${FRONTEND_URL:http://localhost:3000}
        # 지원하는 OAuth2 제공자 목록
        supported-providers:
          - google
          - naver
          - kakao

      # 쿠키 설정
      cookie:
        # 쿠키 도메인 (프로덕션 환경에서 설정)
        domain: ${COOKIE_DOMAIN:}
        # 쿠키 경로
        path: /
        # HTTPS 전용 쿠키 여부 (프로덕션에서 true 권장)
        secure: ${COOKIE_SECURE:false}
        # HttpOnly 쿠키 여부 (보안상 true 권장)
        http-only: true
        # SameSite 설정 (CSRF 방지)
        same-site: Lax

    # 클라이언트 설정 (kyj-lib-core-security-client 사용시)
    client:
      # JWT 토큰 검증 설정
      jwt:
        # JWT 시크릿 키 (인증 서버와 동일한 키 사용)
        secret: ${JWT_SECRET:your-super-secret-jwt-key-at-least-32-characters-long}

      # 인증 정책 설정
      auth:
        # 기본 인증 필요 여부 (true: 기본적으로 인증 필요, @PublicEndpoint로 예외 처리)
        require-auth-by-default: true
        # 토큰 블랙리스트 검증 여부
        enable-blacklist-check: true

      # AWS API Gateway 통합 설정 (선택사항)
      api-gateway:
        # API Gateway 사용 여부
        enabled: ${API_GATEWAY_ENABLED:false}
        # API Gateway에서 전달하는 사용자 정보 헤더명
        user-info-header: x-api-gateway-user-info
        # API Gateway 트러스트 검증
        verify-gateway-trust: true
        # 신뢰할 수 있는 소스 IP 또는 헤더 (선택사항)
        trusted-sources:
          - x-forwarded-for
          - x-real-ip

# 모니터링 설정 (kyj-lib-core 포함)
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  endpoint:
    health:
      show-details: when_authorized
  metrics:
    export:
      prometheus:
        enabled: true

# 로깅 설정
logging:
  level:
    com.kyj.core: INFO
    com.kyj.core.security: DEBUG
    org.springframework.security: INFO
    org.springframework.security.oauth2: DEBUG
    org.springframework.kafka: INFO
    org.springframework.data.redis: INFO
    com.zaxxer.hikari: INFO

---
# 로컬 개발 환경
spring:
  config:
    activate:
      on-profile: local

  # 로컬 개발용 설정
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: update

  # 로컬 Redis (보안 없음)
  data:
    redis:
      password:

# 로컬 개발용 로깅
logging:
  level:
    com.kyj.core: DEBUG
    org.springframework.web: DEBUG
    org.springframework.security: DEBUG

---
# 개발 환경
spring:
  config:
    activate:
      on-profile: dev

  jpa:
    hibernate:
      ddl-auto: validate

kyj:
  security:
    auth:
      cookie:
        secure: false

---
# 프로덕션 환경
spring:
  config:
    activate:
      on-profile: prod

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false

kyj:
  security:
    auth:
      cookie:
        secure: true
        same-site: Strict

# 프로덕션 로깅
logging:
  level:
    com.kyj.core: INFO
    org.springframework.web: WARN
    org.springframework.security: WARN